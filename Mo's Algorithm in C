/*
Author: Ayan Raj
C Program to Add Two Matrices using Multi-dimensional Arrays
*/


#include <stdio.h>

int main()
{
    int r, c, a[100][100], b[100][100], sum[100][100], i, j;

    printf("Enter number of rows (between 1 and 100)");
    scanf("%d",&r);

    printf("Enter number of columns (between 1 and 100)\n");
    scanf("%d",&c);

    printf("Enter elements of 1st matrix: \n");
    
    // Storing elements of first matrix entered by user
    
    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           printf("Enter element a%d%d: ",i+1,j+1);
           scanf("%d",&a[i][j]);
       }

    // Storing elements of second matrix entered by user
    
    printf("Enter elements of 2nd matrix: \n");
    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           printf("Enter element b%d%d: ",i+1,j+1);
           scanf("%d",&b[i][j]);
       }

    // Adding Two matrices
    
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
            sum[i][j] = a[i][j] + b[i][j];

    // Displaying the resultant sum matrix
    
    printf("\n Sum of two matrix is: \n");
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
        {
            printf("%d ",sum[i][j]);
            if(j == c - 1)
                printf("\n");
        }

    return 0;
}



/*
Enter number of rows (between 1 and 100): 2
Enter number of columns (between 1 and 100): 2
Enter elements of 1st matrix:
Enter element a11: 7
Enter element a12: 5
Enter element a21: 3
Enter element a22: 6
Enter elements of 2nd matrix:
Enter element b11: 3
Enter element b12: -9
Enter element b21: 4
Enter element b22: -9
Sum of two matrix is:
10   -4
7   -3
*/


/*
Author:Ayan Raj
C Program to compute determinant of a Matrix
*/

#include <stdio.h>

// Dimension of input square matrix 

#define N 4 

/* Function to get cofactor of mat[p][q] in temp[][]. n is current 
   dimension of mat[][] */
void getCofactor(int mat[N][N], int temp[N][N], int p, int q, int n) 
{ 
    int i = 0, j = 0; 

    // Looping for each element of the matrix 
    for (int row = 0; row < n; row++) 
    { 
        for (int col = 0; col < n; col++) 
        { 
            //  Copying into temporary matrix only those element 
            //  which are not in given row and column 
            if (row != p && col != q) 
            { 
                temp[i][j++] = mat[row][col]; 

                // Row is filled, so increase row index and 
                // reset col index 
                if (j == n - 1) 
                { 
                    j = 0; 
                    i++; 
                } 
            } 
        } 
    } 
} 

/* Recursive function for finding determinant of matrix. 
   n is current dimension of mat[][] */
   
int determinantOfMatrix(int mat[N][N], int n) 
{ 
    int D = 0; // Initialize result 

    //  Base case : if matrix contains single element 
    if (n == 1) 
        return mat[0][0]; 

    int temp[N][N]; // To store cofactors 

    int sign = 1;  // To store sign multiplier 

     // Iterate for each element of first row 
     
    for (int f = 0; f < n; f++) 
    { 
        // Getting Cofactor of mat[0][f] 
        getCofactor(mat, temp, 0, f, n); 
        D += sign * mat[0][f] * determinantOfMatrix(temp, n - 1); 

        // terms are to be added with alternate sign 
        sign = -sign; 
    } 

    return D; 
} 

// function for displaying the matrix 

void display(int mat[N][N], int row, int col) 
{ 
    for (int i = 0; i < row; i++) 
    { 
        for (int j = 0; j < col; j++) 
            printf("  %d", mat[i][j]); 
        printf("n"); 
    } 
} 

int main() 
{ 

    int mat[N][N] = {{1, 0, 2, -1}, 
                     {3, 0, 0, 5}, 
                     {2, 1, 4, -3}, 
                     {1, 0, 5, 0} 
                    }; 
                    
    printf("Determinant of the matrix is : %d",determinantOfMatrix(mat, N));
    return 0; 
} 



/*
Determinant of the matrix is : 30
*/


/*
Author: Ayan Raj
C Program to find mirror of matrix across diagonal
Input : mat[][] = {{1  2  3  4 }
                   {5  6  7  8 }
                   {9  10 11 12}
                   {13 14 15 16} }
Output : 1 5 9 13 
         2 6 10 14  
         3 7 11 15 
         4 8 12 16
*/


/*
Author: Ayan Raj
C program to multiply two square matrices.
*/

#include <stdio.h>  

#define N 4  

/* This function multiplies  
   mat1[][] and mat2[][], and  
   stores the result in res[][] */
   
void multiply(int mat1[][N],  
              int mat2[][N],  
              int res[][N]) 
{ 
    int i, j, k; 
    for (i = 0; i < N; i++) 
    { 
        for (j = 0; j < N; j++) 
        { 
            res[i][j] = 0; 
            for (k = 0; k < N; k++) 
                res[i][j] += mat1[i][k] *  
                             mat2[k][j]; 
        } 
    } 
} 

// Main Function 
int main() 
{ 
    int i, j; 
    int res[N][N]; // for storing result 
    int mat1[N][N] = {{1, 1, 1, 1}, 
                      {2, 2, 2, 2}, 
                      {3, 3, 3, 3}, 
                      {4, 4, 4, 4}}; 

    int mat2[N][N] = {{1, 1, 1, 1}, 
                      {2, 2, 2, 2}, 
                      {3, 3, 3, 3}, 
                      {4, 4, 4, 4}}; 

    multiply(mat1, mat2, res); 
    
    printf("Result matrix is \n");
    for (i = 0; i < N; i++) 
    { 
        for (j = 0; j < N; j++)
        printf("%d ",res[i][j]);
        printf("\n");
    } 

    return 0; 
} 


/*
OUTPUT:

Result matrix is
10 10 10 10
20 20 20 20
30 30 30 30
40 40 40 40 
*/

/*
Author: Ayan Raj
C program to find the scalar product of a matrix 
*/

#include <stdio.h> 

#define N 3 

void scalarProductMat(int mat[][N], int k) 
{ 
    // scalar element is multiplied by the matrix 
    
    for (int i = 0; i < N; i++)  
        for (int j = 0; j < N; j++)  
            mat[i][j] = mat[i][j] * k;         
} 


int main() 
{ 
    int mat[N][N] = { { 1, 2, 3 }, 
                      { 4, 5, 6 }, 
                      { 7, 8, 9 } }; 
    int k = 4;   //scaling factor

    scalarProductMat(mat, k); 


    printf("Scalar Product Matrix is : \n"); 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++)  
            printf("%d ", mat[i][j]); 
        printf("\n"); 
    } 

    return 0; 
} 



/*
Scalar Product Matrix is : 
4 8 12 
16 20 24 
28 32 36
*/

/*
Author: Ayan Raj
C Program to sort a matrix
*/



#include <stdio.h>
 
int main () {
 
	static int ma[10][10],mb[10][10];
 
	int i,j,k,a,m,n;
 
	printf ("Enter the order of the matrix \n");
 
	scanf ("%d %d", &m,&n);
 
	printf ("Enter co-efficients of the matrix \n");
 
	for (i=0;i<m;++i) {
 
		for (j=0;j<n;++j) {
 
			scanf ("%d",&ma[i][j]);
 
			mb[i][j] = ma[i][j];
 
		}
 
	}
 
	printf ("The given matrix is \n");
 
	for (i=0;i<m;++i) {
 
		for (j=0;j<n;++j) {
 
			printf (" %d",ma[i][j]);
 
		}
 
		printf ("\n");
 
	}
 
	printf ("After arranging rows in ascending order\n");
 
	for (i=0;i<m;++i) {
 
		for (j=0;j<n;++j) {
 
			for (k=(j+1);k<n;++k) {
 
				if (ma[i][j] > ma[i][k]) {
 
					a = ma[i][j];
 
					ma[i][j] = ma[i][k];
 
					ma[i][k] = a;
 
				}
 
			}
 
		}
 
	}
 
	/* End of outer for loop*/
 
	for (i=0;i<m;++i) {
 
		for (j=0;j<n;++j) {
 
			printf (" %d",ma[i][j]);
 
		}
 
		printf ("\n");
 
	}
 
	printf ("After arranging the columns in descending order \n");
 
	for (j=0;j<n;++j) {
 
		for (i=0;i<m;++i) {
 
			for (k=i+1;k<m;++k) {
 
				if (mb[i][j] < mb[k][j]) {
 
					a = mb[i][j];
 
					mb[i][j] = mb[k][j];
 
					mb[k][j] = a;
 
				}
 
			}
 
		}
 
	}
 
	/* End of outer for loop*/
 
	for (i=0;i<m;++i) {
 
		for (j=0;j<n;++j) {
 
			printf (" %d",mb[i][j]);
 
		}
 
		printf ("\n");
 
	}
 
}
 
/*End of main() */

/*
Input:
Enter the order of the matrix
2 3
Enter co-efficients of the matrix
1
6
4
8
9
7
Output:
The given matrix is
 1 6 4
 8 9 7
After arranging rows in ascending order
 1 4 6
 7 8 9
After arranging the columns in descending order
 8 9 7
 1 6 4
*/
